package net.mcatlas.helpers;

import org.bukkit.ChatColor;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.entity.*;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntityShootBowEvent;
import org.bukkit.event.hanging.HangingBreakEvent;
import org.bukkit.event.inventory.InventoryMoveItemEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.world.ChunkLoadEvent;
import org.bukkit.inventory.InventoryHolder;
import org.bukkit.inventory.ItemStack;

import java.util.List;

public class ExploitFixes implements Listener {

    @EventHandler
    public void onInteract(PlayerInteractEvent event) {
        if (event.getClickedBlock() == null) {
            return;
        }

        if (event.getItem() == null) {
            return;
        }

        if (event.getClickedBlock().getState() instanceof InventoryHolder) {
            if (event.getItem().getType().name().contains("BOAT")) {
                event.setCancelled(true);
            }
        }
    }

    @EventHandler
    public void onInventoryMoveItem(InventoryMoveItemEvent event) {
        ItemStack itemStack = event.getItem();

        if (itemStack == null || itemStack.getType() == Material.AIR) {
            return;
        }

        if (itemStack.getType() == Material.BEDROCK
                || itemStack.getType() == Material.BARRIER) {
            event.setItem(new ItemStack(Material.AIR));
        }
    }

    @EventHandler
    public void onInventoryOpen(InventoryOpenEvent event) {
        for (int i = 0; i < event.getInventory().getSize(); i++) {
            ItemStack itemStack = event.getInventory().getItem(i);

            if (itemStack == null || itemStack.getType() == Material.AIR) {
                continue;
            }

            if (itemStack.getType() == Material.BEDROCK
                    || itemStack.getType() == Material.BARRIER
                    || itemStack.getType() == Material.COMMAND_BLOCK) {
                event.getInventory().setItem(i, new ItemStack(Material.AIR));
            }
        }
    }

    @EventHandler
    public void preventIllegalBlockPlace(BlockPlaceEvent event) {
        Material type = event.getBlock().getType();

        if (type == Material.BEDROCK || type == Material.BARRIER || type == Material.COMMAND_BLOCK) {
            event.setCancelled(true);
        }
    }

    @EventHandler
    public void doNotAllowFlyingOverY2K(PlayerMoveEvent event) {
        if (event.getTo().getBlockY() > 2000) {
            event.setCancelled(true);
            event.getPlayer().sendMessage(ChatColor.RED + "You've flown too high.");
        }
    }

    @EventHandler
    public void preventItemFrameBreakByVehicle(HangingBreakEvent event) {
        if (event.getCause() == HangingBreakEvent.RemoveCause.PHYSICS) {
            List<Entity> nearby = event.getEntity().getNearbyEntities(3, 3, 3);

            nearby.forEach(entity -> {
                if (entity instanceof Vehicle) {
                    event.setCancelled(true);
                }
            });
        }
    }

    @EventHandler
    public void onChunkLoadCheckForBedrock(ChunkLoadEvent event) {
        Chunk chunk = event.getChunk();

        for (Entity entity : chunk.getEntities()) {
            if (entity instanceof ItemFrame) {
                ItemFrame itemFrame = (ItemFrame) entity;
                ItemStack itemStack = itemFrame.getItem();

                if (itemStack != null && itemStack.getType() != Material.AIR) {
                    if (itemStack.getType() == Material.BEDROCK || itemStack.getType() == Material.BARRIER) {
                        itemFrame.setItem(new ItemStack(Material.AIR));
                    }
                }
            }
        }
    }

    @EventHandler
    public void fireworkCrossbowNerf(EntityShootBowEvent event) {
        Entity entity = event.getProjectile();
        if (entity.getType() != EntityType.FIREWORK) {
            return;
        }

        Firework firework = (Firework) entity;
        firework.detonate();
    }

}
